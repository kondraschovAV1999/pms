CREATE DATABASE IF NOT EXISTS prison;

USE prison;

CREATE TABLE IF NOT EXISTS PRISONER (
    PrisonerId INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    Fname VARCHAR(255) NOT NULL,
    Lname VARCHAR(255) NOT NULL,
    DOB DATE NOT NULL,
    IDNumber VARCHAR(255) NOT NULL,
    IDType VARCHAR(255) NOT NULL,
    Address VARCHAR(255),
    Marriage ENUM('SINGLE', 'DIVORCED', 'MARRIED', 'WIDOWED'),
    DLevel ENUM('A', 'B', 'C', 'D', 'E') NOT NULL,
    CrimeType VARCHAR(255) NOT NULL,
    `Status` ENUM('IMPRISONED', 'RELEASED'),
    EdLevel VARCHAR(255),
    Term VARCHAR(255) NOT NULL,
    StaffId INT,
    WorkId INT,
    RelDate DATE NOT NULL,
    DeptId INT
);

CREATE TABLE IF NOT EXISTS STAFF (
    StaffId INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    Fname VARCHAR(255) NOT NULL,
    Lname VARCHAR(255) NOT NULL,
    DOB DATE NOT NULL,
    IDNumber VARCHAR(255) NOT NULL,
    IDType VARCHAR(255) NOT NULL,
    Gender ENUM('M', 'F'),
    `Level` ENUM('NORMAL_STAFF', 'MASTER', 'VICE_MASTER'),
    MasterId INT,
    DeptId INT
);

CREATE TABLE IF NOT EXISTS DEPARTMENT (
    ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    `Name` VARCHAR(255)
);

CREATE TABLE IF NOT EXISTS DUTY (
    ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    IsDayTime BOOL NOT NULL,
    `Date` DATE NOT NULL,
    DeptId INT
);

CREATE TABLE IF NOT EXISTS ASSESSMENT (
    ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    Score INT NOT NULL,
    StaffId INT,
    `Date` DATE NOT NULL,
    CHECK(Score > 0 AND Score <= 100)
);

CREATE TABLE IF NOT EXISTS ASSIGNMENT (
    ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    Description VARCHAR(255)
);

CREATE TABLE IF NOT EXISTS `WORK` (
    ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    `Type` VARCHAR(255) NOT NULL,
    DeptId INT
);

CREATE TABLE IF NOT EXISTS PERMISSION (
    ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    Permission VARCHAR(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS DEGREE (
    ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    `Name` VARCHAR(255) NOT NULL,
    Field VARCHAR(255),
    `Level` VARCHAR(255)
);

CREATE TABLE IF NOT EXISTS COURSE (
    ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    `Name` VARCHAR(255) NOT NULL,
    Teacher VARCHAR(255)
);

CREATE TABLE IF NOT EXISTS COMMUNICATION (
    ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    PrisonerId INT,
    `Timestamp` TIMESTAMP(6) NOT NULL,
    Transcript TEXT NOT NULL,
    Relation VARCHAR(255) NOT NULL,
    `Name` VARCHAR(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS PRISONER_DEGREE (
    PrisonerId INT,
    DegreeId INT,
    `Status` ENUM('IN_PROGRESS', 'FINISHED', 'SUSPENDED'),
    `Date` DATE
);

CREATE TABLE IF NOT EXISTS ENROLLMENT (
    PrisonerId INT,
    CourseId INT,
    Grade FLOAT(2),
    `Status` ENUM('IN_PROGRESS', 'FINISHED', 'SUSPENDED'),
    `Date` DATE,
    CHECK(Grade > 0 AND Grade <= 4)
);

CREATE TABLE IF NOT EXISTS DEGREE_COURSE (
    DegreeId INT,
    CourseId INT
);

CREATE TABLE IF NOT EXISTS STAFF_DUTIES (
    StaffId INT,
    DutyId INT
);

CREATE TABLE IF NOT EXISTS STAFF_ASSIGNMENTS (
    StaffId INT,
    AssignmentId INT
);

CREATE TABLE IF NOT EXISTS ASSIGNMENT_PERMISSIONS (
    AssignId INT,
    PermissionId INT
);

CREATE TABLE IF NOT EXISTS DEPT_PERMISSIONS (
    DeptId INT,
    PermissionId INT
);

/* Add FK constraints to the tables */

ALTER TABLE STAFF 
ADD CONSTRAINT fk_master 
FOREIGN KEY (MasterId) REFERENCES STAFF(StaffId);

ALTER TABLE STAFF_DUTIES 
ADD CONSTRAINT fk_staff_duties_staff
FOREIGN KEY (StaffId) REFERENCES STAFF(StaffId) ON DELETE CASCADE;

ALTER TABLE STAFF_DUTIES 
ADD CONSTRAINT fk_staff_duties_duty
FOREIGN KEY (DutyId) REFERENCES DUTY(ID);

ALTER TABLE DUTY 
ADD CONSTRAINT fk_duty_dept
FOREIGN KEY (DeptId) REFERENCES DEPARTMENT(ID) ON DELETE CASCADE;

ALTER TABLE ASSESSMENT 
ADD CONSTRAINT fk_assessment_staff
FOREIGN KEY (StaffId) REFERENCES STAFF(StaffId) ON DELETE CASCADE;

ALTER TABLE STAFF_ASSIGNMENTS 
ADD CONSTRAINT fk_staff_assignments_staff
FOREIGN KEY (StaffId) REFERENCES STAFF(StaffId) ON DELETE CASCADE;

ALTER TABLE STAFF_ASSIGNMENTS 
ADD CONSTRAINT fk_staff_assignments_assignment
FOREIGN KEY (AssignmentId) REFERENCES ASSIGNMENT(ID) ON DELETE CASCADE;

ALTER TABLE ASSIGNMENT_PERMISSIONS 
ADD CONSTRAINT fk_assignment_permissions_assignment
FOREIGN KEY (AssignId) REFERENCES ASSIGNMENT(ID) ON DELETE CASCADE;

ALTER TABLE ASSIGNMENT_PERMISSIONS 
ADD CONSTRAINT fk_assignment_permissions_permission
FOREIGN KEY (PermissionId) REFERENCES PERMISSION(ID) ON DELETE CASCADE;

ALTER TABLE DEPT_PERMISSIONS 
ADD CONSTRAINT fk_dept_permissions_dept
FOREIGN KEY (DeptId) REFERENCES DEPARTMENT(ID) ON DELETE CASCADE;

ALTER TABLE DEPT_PERMISSIONS
ADD CONSTRAINT fk_dept_permissions_permission
FOREIGN KEY (PermissionId) REFERENCES PERMISSION(ID) ON DELETE CASCADE;

ALTER TABLE DEGREE_COURSE
ADD CONSTRAINT fk_degree_course_degree
FOREIGN KEY (DegreeId) REFERENCES DEGREE(ID) ON DELETE CASCADE;

ALTER TABLE DEGREE_COURSE
ADD CONSTRAINT fk_degree_course_course
FOREIGN KEY (CourseId) REFERENCES COURSE(ID) ON DELETE CASCADE;

ALTER TABLE PRISONER_DEGREE
ADD CONSTRAINT fk_prisoner_degree_degree
FOREIGN KEY (DegreeId) REFERENCES DEGREE(ID) ON DELETE CASCADE;

ALTER TABLE PRISONER_DEGREE
ADD CONSTRAINT fk_prisoner_degree_prisoner
FOREIGN KEY (PrisonerId) REFERENCES PRISONER(PrisonerId) ON DELETE CASCADE;

ALTER TABLE ENROLLMENT
ADD CONSTRAINT fk_enrollment_course
FOREIGN KEY (CourseId) REFERENCES COURSE(ID) ON DELETE CASCADE;

ALTER TABLE ENROLLMENT
ADD CONSTRAINT fk_enrollment_prisoner
FOREIGN KEY (PrisonerId) REFERENCES PRISONER(PrisonerId) ON DELETE CASCADE;

ALTER TABLE PRISONER
ADD CONSTRAINT fk_prisoner_work
FOREIGN KEY (WorkId) REFERENCES `WORK`(ID);

ALTER TABLE PRISONER
ADD CONSTRAINT fk_prisoner_staff
FOREIGN KEY (StaffId) REFERENCES STAFF(StaffId);

ALTER TABLE PRISONER
ADD CONSTRAINT fk_prisoner_dep
FOREIGN KEY (DeptId) REFERENCES DEPARTMENT(ID) ON DELETE CASCADE;


CREATE USER 'app_dev'@'%' IDENTIFIED BY 'dev';
GRANT SELECT, INSERT, UPDATE, DELETE ON prison.* TO 'app_dev'@'%';

FLUSH PRIVILEGES;